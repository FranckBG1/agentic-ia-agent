import logging
import json
import re
from typing import Dict, Any, List
import google.generativeai as genai

logger = logging.getLogger(__name__)


class CollectionAgent:
    """
    Agent sp√©cialis√© dans la collecte progressive de param√®tres psychologiques.
    
    Responsabilit√©s:
    - Collecter param√®tres (emotion, causes, duration, symptomes, intensite)
    - Extraction intelligente via Gemini
    - G√©n√©ration de questions contextuelles
    - Suivi de progression (completion_rate)
    
    """
    
    REQUIRED_PARAMS = ['emotion', 'causes', 'duration', 'symptomes', 'intensite']
    
    def __init__(self, gemini_model=None):
        """
        Args:
            gemini_model: Mod√®le Gemini pour extraction intelligente
        """
        self.model = gemini_model
        logger.info("‚úÖ CollectionAgent initialis√©")
    
    def collect_parameters(self, user_text: str, current_params: Dict = None) -> Dict[str, Any]:
        """
        Collecte progressive des param√®tres psychologiques.
        
        Args:
            user_text: Message utilisateur
            current_params: Param√®tres d√©j√† collect√©s
        
        Returns:
            Dict contenant:
                - is_complete: bool
                - collected_params: Dict
                - missing_params: List[str]
                - next_question: str
                - completion_rate: float
        """
        collected = current_params or {}
        
        # Extraire nouveaux param√®tres (100% Gemini)
        new_params = self._extract_params_with_gemini(user_text)
        
        # Mettre √† jour avec nouveaux param√®tres
        for key, value in new_params.items():
            if value and not collected.get(key):
                collected[key] = value
                logger.info(f"‚úì Param√®tre collect√©: {key} = {value}")
        
        # V√©rifier param√®tres manquants
        missing = [p for p in self.REQUIRED_PARAMS if not collected.get(p)]
        
        # Taux de compl√©tion
        completion_rate = (len(self.REQUIRED_PARAMS) - len(missing)) / len(self.REQUIRED_PARAMS)
        
        # Si complet
        if not missing:
            logger.info(f"‚úÖ Tous les param√®tres collect√©s: {collected}")
            return {
                "is_complete": True,
                "collected_params": collected,
                "missing_params": [],
                "next_question": None,
                "completion_rate": 1.0
            }
        
        # G√©n√©rer question pour prochain param√®tre
        next_param = missing[0]
        next_question = self._generate_question_for_param(next_param, collected)
        
        logger.info(f"üìù Param√®tre manquant: {next_param} ({completion_rate*100:.0f}% compl√©t√©)")
        
        return {
            "is_complete": False,
            "collected_params": collected,
            "missing_params": missing,
            "next_question": next_question,
            "completion_rate": completion_rate
        }
    
    def _extract_params_with_gemini(self, text: str) -> Dict[str, Any]:
        """
        Extraction 100% Gemini pour intelligence maximale.
        D√©tecte √©motions, causes, dur√©e, sympt√¥mes, intensit√©.
        """
        if not self.model:
            logger.warning("‚ùå Mod√®le Gemini non disponible")
            return {}
        
        prompt = f"""Tu es un assistant d'extraction de param√®tres psychologiques pour une conversation de soutien.

Analyse cette phrase et extrais UNIQUEMENT les informations pertinentes sur l'√©tat psychologique :
"{text}"

Param√®tres √† extraire (si pr√©sents) :
- emotion : l'√©motion principale ressentie (tristesse, anxi√©t√©, stress, col√®re, peur, solitude, d√©pression, suicide, etc.)
- causes : la cause du mal-√™tre (travail, famille, relation, sant√©, financier, √©tudes, solitude, etc.)
- duration : depuis combien de temps (exemples: "1 mois", "2 semaines", "quelques jours", "longtemps", etc.)
- symptomes : sympt√¥mes physiques/mentaux (insomnie, fatigue, maux de t√™te, concentration, app√©tit, etc.)
- intensite : niveau d'intensit√© de 1 √† 10 (si mentionn√© explicitement OU si le texte est UNIQUEMENT un chiffre entre 1 et 10)

R√àGLES CRITIQUES :
- N'extrais QUE les √©motions/sympt√¥mes R√âELLEMENT ressentis par la personne
- IGNORE les expressions famili√®res, blagues, ou langage figur√© ("t'es fou", "c'est dingue", etc.)
- Si le texte est UNIQUEMENT un chiffre entre 1-10 (ex: "9"), extrais-le comme intensite
- Si la phrase est une question ou expression NON-INFORMATIVE, retourne {{}}
- Ne r√©ponds QU'AVEC un objet JSON valide
- Si un param√®tre n'est PAS clairement mentionn√©, mets null
- Utilise des termes simples et clairs

Exemples :
- "je me sens stress√©e" ‚Üí {{"emotion": "stress"}}
- "c'est √† cause de mon travail" ‚Üí {{"causes": "travail"}}
- "je veux me suicider" ‚Üí {{"emotion": "suicide"}}
- "9" ‚Üí {{"intensite": "9"}}
- "8/10" ‚Üí {{"intensite": "8"}}
- "t'es fou ou quoi?" ‚Üí {{}}  (expression, pas une √©motion r√©elle)
- "depuis 3 mois" ‚Üí {{"duration": "3 mois"}}
- "je dors mal depuis une semaine" ‚Üí {{"symptomes": "insomnie", "duration": "1 semaine"}}

R√©ponds UNIQUEMENT avec le JSON, sans texte avant ou apr√®s."""

        try:
            response = self.model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.1,  # Pr√©cision maximale
                    max_output_tokens=200
                )
            )
            
            response_text = response.text.strip()
            response_text = re.sub(r'```json\s*|\s*```', '', response_text).strip()
            
            params = json.loads(response_text)
            filtered_params = {k: v for k, v in params.items() if v is not None}
            
            logger.info(f"ü§ñ Extraction Gemini: {filtered_params}")
            return filtered_params
            
        except Exception as e:
            logger.error(f"‚ùå Erreur extraction Gemini: {e}")
            return {}
    
    def _generate_question_for_param(self, param_name: str, collected: Dict) -> str:
        """
        G√©n√®re question contextuelle pour param√®tre manquant.
        Utilise Gemini pour personnalisation dynamique et empathique.
        """
        # Questions par d√©faut (fallback si Gemini √©choue)
        fallback_questions = {
            'emotion': "Comment vous sentez-vous en ce moment ?",
            'causes': "Selon vous, qu'est-ce qui pourrait expliquer cet √©tat ?",
            'duration': "Depuis combien de temps ressentez-vous cela ?",
            'symptomes': "Avez-vous remarqu√© des sympt√¥mes particuliers (sommeil, app√©tit, concentration) ?",
            'intensite': "Sur une √©chelle de 1 √† 10, √† quel point ressentez-vous cet inconfort ?"
        }
        
        # Si Gemini non disponible, utiliser question par d√©faut
        if not self.model:
            return fallback_questions.get(param_name, "Pouvez-vous m'en dire plus ?")
        
        # Construire contexte pour Gemini
        context_parts = []
        if collected.get('emotion'):
            context_parts.append(f"l'utilisateur ressent {collected['emotion']}")
        if collected.get('causes'):
            context_parts.append(f"√† cause de {collected['causes']}")
        if collected.get('duration'):
            context_parts.append(f"depuis {collected['duration']}")
        if collected.get('symptomes'):
            context_parts.append(f"avec sympt√¥mes: {collected['symptomes']}")
        if collected.get('intensite'):
            context_parts.append(f"intensit√©: {collected['intensite']}/10")
        
        context_str = ", ".join(context_parts) if context_parts else "d√©but de conversation"
        
        # Descriptions des param√®tres pour Gemini
        param_descriptions = {
            'emotion': "l'√©motion principale ressentie (tristesse, stress, anxi√©t√©, etc.)",
            'causes': "la cause ou l'origine du mal-√™tre (travail, famille, sant√©, etc.)",
            'duration': "depuis combien de temps cette situation dure",
            'symptomes': "les sympt√¥mes physiques ou mentaux observ√©s (insomnie, fatigue, concentration, etc.)",
            'intensite': "le niveau d'intensit√© sur une √©chelle de 1 √† 10"
        }
        
        prompt = f"""Tu es un psychologue empathique dans une conversation de soutien.

Contexte actuel: {context_str}

Tu dois poser UNE question pour collecter: {param_descriptions.get(param_name, param_name)}

R√àGLES CRITIQUES:
- Question courte (max 20 mots)
- Ton empathique et bienveillant
- Naturelle et conversationnelle (pas robotique)
- Adapt√©e au contexte d√©j√† collect√©
- Ne r√©p√®te PAS les informations d√©j√† donn√©es
- Utilise "vous" (vouvoiement)

EXEMPLES:
- Si contexte vide + cherche emotion ‚Üí "Comment vous sentez-vous en ce moment ?"
- Si emotion=stress + cherche causes ‚Üí "Qu'est-ce qui vous stresse particuli√®rement ?"
- Si emotion=tristesse, causes=travail + cherche duration ‚Üí "Depuis quand cette situation au travail vous affecte-t-elle ?"
- Si plusieurs param√®tres connus + cherche intensite ‚Üí "Sur une √©chelle de 1 √† 10, comment √©valueriez-vous votre mal-√™tre ?"

R√©ponds UNIQUEMENT avec la question, sans guillemets ni ponctuation suppl√©mentaire."""

        try:
            response = self.model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.7,  # Un peu de cr√©ativit√© pour vari√©t√©
                    max_output_tokens=50
                )
            )
            
            question = response.text.strip().strip('"').strip("'")
            
            # Validation: la question doit se terminer par ?
            if not question.endswith('?'):
                question += ' ?'
            
            logger.info(f"ü§ñ Question Gemini g√©n√©r√©e: {question}")
            return question
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration question Gemini: {e}")
            # Fallback sur question par d√©faut
            base_question = fallback_questions.get(param_name, "Pouvez-vous m'en dire plus ?")
            
            # Personnalisation contextuelle simple en fallback
            if param_name == 'duration' and collected.get('emotion'):
                emotion = collected['emotion']
                return f"Depuis combien de temps ressentez-vous {emotion} ?"
            
            return base_question
    
    def get_collection_summary(self, collected_params: Dict) -> str:
        """
        G√©n√®re un r√©sum√© textuel des param√®tres collect√©s.
        Utile pour afficher √† l'utilisateur ce qui a √©t√© compris.
        """
        if not collected_params:
            return "Aucun param√®tre collect√© pour le moment."
        
        summary_parts = []
        
        if collected_params.get('emotion'):
            summary_parts.append(f"√âmotion: {collected_params['emotion']}")
        if collected_params.get('causes'):
            summary_parts.append(f"Cause: {collected_params['causes']}")
        if collected_params.get('duration'):
            summary_parts.append(f"Dur√©e: {collected_params['duration']}")
        if collected_params.get('symptomes'):
            summary_parts.append(f"Sympt√¥mes: {collected_params['symptomes']}")
        if collected_params.get('intensite'):
            summary_parts.append(f"Intensit√©: {collected_params['intensite']}/10")
        
        return " | ".join(summary_parts)
