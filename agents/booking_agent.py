import logging
import re
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import google.generativeai as genai

logger = logging.getLogger(__name__)


class BookingAgent:
    """
    Agent sp√©cialis√© dans la d√©cision et g√©n√©ration de cr√©neaux de consultation.
    
    Responsabilit√©s:
    - D√©cider si des cr√©neaux doivent √™tre propos√©s (5 crit√®res + PRIORIT√â 0 urgence)
    - G√©n√©rer les cr√©neaux via Gemini
    - G√©rer l'ajout au Google Calendar
    """
    
    def __init__(self, gemini_model=None):
        self.model = gemini_model
        logger.info("‚úÖ BookingAgent initialis√©")
    
    def should_propose_slots(self, context: Dict[str, Any]) -> bool:
        """
        D√©termine si on doit proposer des cr√©neaux
        
        Args:
            context: Contexte contenant:
                - severity_level: Niveau de s√©v√©rit√© (√âlev√©, Mod√©r√©, Faible)
                - urgency_score: Score d'urgence (0-10)
                - duration: Dur√©e des sympt√¥mes
                - symptomes: Sympt√¥mes rapport√©s
                - is_emergency: Si True, cas d'urgence (suicide, violence)
        
        Returns:
            bool: True si on doit proposer des cr√©neaux
        """
        severity_level = context.get('severity_level', 'Faible')
        urgency_score = context.get('urgency_score', 0)
        duration = context.get('duration', '')
        symptomes = context.get('symptomes', '')
        is_emergency = context.get('is_emergency', False)
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # PRIORIT√â 0: URGENCE (suicide, violence) ‚Üí TOUJOURS proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        if is_emergency:
            logger.info(f"üö® Booking propos√©: URGENCE D√âTECT√âE")
            return True
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # Cas 1: S√©v√©rit√© √©lev√©e ‚Üí TOUJOURS proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        if severity_level in ['√âlev√©', 'Elev√©']:
            logger.info(f"üìÖ Booking propos√©: s√©v√©rit√© √©lev√©e")
            return True
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # Cas 2: Score d'urgence √©lev√© (‚â• 7) ‚Üí TOUJOURS proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        if urgency_score >= 7:
            logger.info(f"üìÖ Booking propos√©: urgence √©lev√©e ({urgency_score}/10)")
            return True
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # Cas 3: Dur√©e longue (mois/ans) ‚Üí proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        duration_lower = duration.lower() if duration else ""
        if any(word in duration_lower for word in ['mois', 'ans', 'ann√©es', 'ann√©e']):
            logger.info(f"üìÖ Booking propos√©: dur√©e longue ({duration})")
            return True
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # Cas 4: Plus de 2 semaines ‚Üí proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        match = re.search(r'(\d+)\s*semaines?', duration_lower)
        if match and int(match.group(1)) > 2:
            logger.info(f"üìÖ Booking propos√©: dur√©e > 2 semaines")
            return True
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # Cas 5: S√©v√©rit√© mod√©r√©e ‚Üí proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        if severity_level == 'Mod√©r√©':
            logger.info(f"üìÖ Booking propos√©: s√©v√©rit√© mod√©r√©e")
            return True
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # Sinon, ne pas proposer
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        logger.info(f"üìÖ Booking NON propos√©: s√©v√©rit√© faible et courte dur√©e")
        return False
    
    def generate_slots(self, specialty: str = "psychologue", city: str = "Paris") -> List[Dict]:
        """
        G√©n√®re 3 cr√©neaux de consultation via Gemini
        TA LOGIQUE EXACTE depuis app.py (generate_fake_slots_with_gemini)
        
        Args:
            specialty: Sp√©cialit√© du praticien
            city: Ville de consultation
            
        Returns:
            Liste de 3 cr√©neaux avec date, heure, praticien, lien, mode
        """
        if not self.model:
            logger.warning("‚ùå Mod√®le Gemini non disponible pour g√©n√©ration cr√©neaux")
            return self._fallback_slots()
        
        try:
            prompt = f"""Tu es un assistant de prise de rendez-vous.
G√©n√®re 3 faux cr√©neaux de rendez-vous pour un(e) {specialty} √† {city}.
Les cr√©neaux doivent √™tre dans les 7 prochains jours √† compter du 30 Octobre 2025.
Les noms des praticiens doivent √™tre fran√ßais et fictifs.

Format JSON √† retourner (tableau de 3 objets) :
[
  {{
    "date": "YYYY-MM-DD",
    "time": "HH:MM",
    "provider_name": "Dr. Nom Pr√©nom",
    "booking_link": "https://www.doctolib.fr/booking/fake-{specialty}-{city}",
    "mode": "pr√©sentiel" ou "t√©l√©consultation"
  }}
]

R√©ponds UNIQUEMENT avec le tableau JSON, sans texte ni balises markdown."""

            response = self.model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(temperature=0.8)
            )

            response_text = response.text.strip()

            # Parser JSON
            try:
                # Chercher pattern JSON
                import json
                json_match = re.search(r'\[\s*\{.*?\}\s*\]', response_text, re.DOTALL)
                if json_match:
                    json_text = json_match.group(0)
                else:
                    # Essayer de nettoyer les balises markdown
                    json_text = re.sub(r'```json\s*|\s*```', '', response_text).strip()

                slots = json.loads(json_text)

                if not isinstance(slots, list):
                    raise ValueError("La r√©ponse n'est pas une liste")

                logger.info(f"‚úÖ {len(slots)} cr√©neaux g√©n√©r√©s par Gemini")
                return slots

            except (json.JSONDecodeError, ValueError) as e:
                logger.error(f"‚ùå Erreur parsing JSON: {e}")
                logger.error(f"R√©ponse brute: {response_text}")
                return self._fallback_slots()

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration cr√©neaux: {e}", exc_info=True)
            return self._fallback_slots()
    
    def _fallback_slots(self) -> List[Dict]:
        """Cr√©neaux par d√©faut en cas d'erreur Gemini"""
        return [
            {
                "date": (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%d"),
                "time": "10:00",
                "provider_name": "Dr. Martin Dubois",
                "booking_link": "https://www.doctolib.fr/booking/demo",
                "mode": "pr√©sentiel"
            },
            {
                "date": (datetime.now() + timedelta(days=5)).strftime("%Y-%m-%d"),
                "time": "14:30",
                "provider_name": "Dr. Sophie Laurent",
                "booking_link": "https://www.doctolib.fr/booking/demo",
                "mode": "t√©l√©consultation"
            },
            {
                "date": (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),
                "time": "16:00",
                "provider_name": "Dr. Claire Bernard",
                "booking_link": "https://www.doctolib.fr/booking/demo",
                "mode": "pr√©sentiel"
            }
        ]
    
    def process_booking_decision(self, analysis_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Traite la d√©cision compl√®te de booking
        
        Args:
            analysis_context: R√©sultats de l'analyse (severity, urgency, duration, is_emergency)
        
        Returns:
            Dict contenant:
                - needs_booking: bool
                - slots: List[Dict] si needs_booking=True
                - reason: str (raison de la d√©cision)
        """
        needs_booking = self.should_propose_slots(analysis_context)
        
        result = {
            "needs_booking": needs_booking,
            "slots": [],
            "reason": ""
        }
        
        if needs_booking:
            # G√©n√©rer les cr√©neaux
            result["slots"] = self.generate_slots()
            result["reason"] = self._get_booking_reason(analysis_context)
            logger.info(f"‚úÖ BookingAgent: {len(result['slots'])} cr√©neaux g√©n√©r√©s")
        else:
            result["reason"] = "Situation ne n√©cessite pas de consultation imm√©diate"
            logger.info(f"‚úÖ BookingAgent: Pas de cr√©neaux n√©cessaires")
        
        return result
    
    def _get_booking_reason(self, context: Dict) -> str:
        """G√©n√®re un message expliquant pourquoi on propose des cr√©neaux"""
        if context.get('is_emergency'):
            return "En raison de l'urgence de votre situation, je vous propose des cr√©neaux de consultation imm√©diate."
        
        severity = context.get('severity_level', '')
        urgency = context.get('urgency_score', 0)
        
        if severity in ['√âlev√©', 'Elev√©']:
            return "Votre situation n√©cessite un accompagnement professionnel. Voici des cr√©neaux disponibles."
        
        if urgency >= 7:
            return "Compte tenu du niveau d'urgence de votre situation, je vous recommande de consulter rapidement."
        
        return "Je vous propose des cr√©neaux de consultation pour un suivi adapt√© √† votre situation."
