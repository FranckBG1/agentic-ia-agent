"""
Fichier de base pour l'architecture agentique ADK - Agent de base

Ce fichier dÃ©finit la classe `Agent` abstraite dont tous les agents spÃ©cialisÃ©s
de Zenflow hÃ©riteront.

Cette approche garantit une structure standardisÃ©e et modulaire, alignÃ©e avec
les principes du Google Agent Development Kit (ADK).
"""
import logging
from abc import ABC, abstractmethod
from typing import Any, Dict

logger = logging.getLogger(__name__)

class Agent(ABC):
    """
    Classe de base abstraite pour tous les agents spÃ©cialisÃ©s.
    
    Chaque agent doit hÃ©riter de cette classe et implÃ©menter la mÃ©thode `execute`.
    """
    
    def __init__(self, model: Any, name: str, instruction: str, description: str):
        """
        Initialise un agent.
        
        Args:
            model: Le grand modÃ¨le de langage (LLM) que l'agent utilisera comme "cerveau".
                   Ex: une instance de `google.generativeai.GenerativeModel`.
            name (str): Un nom unique pour l'agent (ex: "analysis_agent").
            instruction (str): Le prompt systÃ¨me ou l'instruction principale qui dÃ©finit
                               le comportement et l'objectif de l'agent.
            description (str): Une courte description du rÃ´le de l'agent.
        """
        if not all([model, name, instruction, description]):
            raise ValueError("Tous les paramÃ¨tres (model, name, instruction, description) sont requis.")
            
        self.model = model
        self.name = name
        self.instruction = instruction
        self.description = description
        
        logger.info(f"ðŸ¤– Agent '{self.name}' initialisÃ©. Description: {self.description}")

    @abstractmethod
    def execute(self, context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Le point d'entrÃ©e principal pour faire travailler l'agent.
        
        Cette mÃ©thode doit Ãªtre implÃ©mentÃ©e par chaque agent spÃ©cialisÃ©. Elle prend
        un dictionnaire de contexte en entrÃ©e et doit retourner un dictionnaire
        contenant les rÃ©sultats de son travail.
        
        Args:
            context (Dict[str, Any]): Un dictionnaire contenant toutes les donnÃ©es
                                      nÃ©cessaires Ã  l'agent pour sa tÃ¢che (ex: message
                                      utilisateur, Ã©tat de la session, etc.).
        
        Returns:
            Dict[str, Any]: Un dictionnaire avec les rÃ©sultats de l'agent.
        """
        pass

    def __repr__(self) -> str:
        return f"Agent(name='{self.name}', description='{self.description}')"

